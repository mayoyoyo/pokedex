{"version":3,"sources":["b01.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","pokemon","setPokemon","data","setData","getPokemon","a","dataArray","url","axios","get","response","push","console","log","TYPE_COLORS","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","className","style","background","backgroundImage","src","onSubmit","event","preventDefault","type","placeholder","aria-label","onChange","target","value","toLowerCase","map","borderColor","types","name","id","species","toUpperCase","backgroundColor","sprites","key","color","role","width","stats","base_stat","aria-valuenow","aria-valuemin","aria-valuemax","height","weight","base_experience","abilities","ability","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1dd8ddf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/b01.de829b88.png\";","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport backgroundImage from \"./b01.png\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [pokemon, setPokemon] = useState(\"bulbasaur\");\n  const [data, setData] = useState([]);\n\n  const handleChange = (event) => {\n    setPokemon(event.target.value.toLowerCase());\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getPokemon();\n  };\n\n  const getPokemon = async () => {\n    const dataArray = [];\n    try {\n      const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`;\n      const response = await axios.get(url);\n      dataArray.push(response.data);\n      setData(dataArray);\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log(data);\n  };\n\n  const TYPE_COLORS = {\n    normal: \"#a8a878\",\n    fighting: \"#c03028\",\n    flying: \"#a890f0\",\n    poison: \"#a040a0\",\n    ground: \"#e0c069\",\n    rock: \"#b8a039\",\n    bug: \"#a8b920\",\n    ghost: \"#705899\",\n    steel: \"#b8b8d0\",\n    fire: \"#f08031\",\n    water: \"#6890f0\",\n    grass: \"#78c850\",\n    electric: \"#f8d030\",\n    psychic: \"#f95888\",\n    ice: \"#98d8d8\",\n    dragon: \"#7138f8\",\n    dark: \"#715849\",\n    fairy: \"#ee99ad\",\n  };\n\n  return (\n    <div className=\"App\" style={{ background: `url(${backgroundImage})` }}>\n      <div className=\"header\">\n        <img className=\"logo\" src=\"https://i.ibb.co/Vq98tN8/logo.png\" />\n        <form className=\"searchbar\" onSubmit={handleSubmit}>\n          <label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n              onChange={handleChange}\n              placeholder=\"Enter PokÃ©mon\"\n            />\n          </label>\n        </form>\n      </div>\n\n      {data.map((data) => {\n        return (\n          <div\n            className=\"card\"\n            style={{ background: `url(${backgroundImage})` }}\n          >\n            <div\n              className=\"name\"\n              style={{ borderColor: `${TYPE_COLORS[data.types[0].type.name]}` }}\n            >\n              #{data.id}. {data.species.name.toUpperCase()}\n            </div>\n\n            <div\n              className=\"container\"\n              style={{\n                backgroundColor: `${TYPE_COLORS[data.types[0].type.name]}`,\n              }}\n            >\n              <div className=\"row\">\n                <div className=\"col-sm\">\n                  <div className=\"portrait\">\n                    <img src={data.sprites[\"front_default\"]} /> <br></br>\n                    {data.types.map((type) => (\n                      <span\n                        key={type.type.name}\n                        className=\"badge\"\n                        style={{\n                          backgroundColor: `${TYPE_COLORS[type.type.name]}`,\n                          color: \"white\",\n                        }}\n                      >\n                        {type.type.name}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"col-sm\">\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">HP</div>\n                    <div className=\"divTableCell\">\n                      {\" \"}\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[0].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[0].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">ATT</div>\n                    <div className=\"divTableCell\">\n                      {\" \"}\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[1].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[1].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">DEF</div>\n                    <div className=\"divTableCell\">\n                      {\" \"}\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[2].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[2].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">S.ATT</div>\n                    <div className=\"divTableCell\">\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[3].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[3].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">S.DEF</div>\n                    <div className=\"divTableCell\">\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[4].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[4].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">SPD</div>\n                    <div className=\"divTableCell\">\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar\"\n                          role=\"progressbar\"\n                          style={{\n                            width: `${data.stats[5].base_stat}%`,\n                          }}\n                          aria-valuenow=\"25\"\n                          aria-valuemin=\"0\"\n                          aria-valuemax=\"100\"\n                        >\n                          <small>{data.stats[5].base_stat}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-sm\">\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">HEIGHT:</div>\n                    <div className=\"divTableCell\"> {data.height * 10}cm</div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">WEIGHT:</div>\n                    <div className=\"divTableCell\"> {data.weight / 10}kg</div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">BASE EXP:</div>\n                    <div className=\"divTableCell\"> {data.base_experience}</div>\n                  </div>\n                  <div className=\"divTableRow\">\n                    <div className=\"divTableCell\">ABILITIES:</div>\n                    <div className=\"divTableCell\">\n                      {\" \"}\n                      {data.abilities.map((ability) => (\n                        <span>\n                          {ability.ability.name} <br></br>\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}