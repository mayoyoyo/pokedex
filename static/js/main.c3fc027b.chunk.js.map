{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","pokemon","setPokemon","data","setData","getPokemon","a","dataArray","url","axios","get","response","push","console","log","className","onSubmit","event","preventDefault","type","placeholder","aria-label","onChange","target","value","toLowerCase","map","id","species","name","toUpperCase","key","src","sprites","role","style","width","stats","base_stat","aria-valuenow","aria-valuemin","aria-valuemax","types","height","weight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAmLeA,G,YA7KH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEHC,EAFG,KAYVC,EAAU,uCAAG,gCAAAC,EAAA,6DACXC,EAAY,GADD,SAGTC,EAHS,4CAGkCP,GAHlC,SAIQQ,IAAMC,IAAIF,GAJlB,OAITG,EAJS,OAKfJ,EAAUK,KAAKD,EAASR,MACxBC,EAAQG,GANO,kDAQfM,QAAQC,IAAR,MARe,0DAAH,qDAYhB,OACE,yBAAKC,UAAU,OACb,0BAAMC,SAnBW,SAACC,GACpBA,EAAMC,iBACNb,MAkBI,+BACE,uCACEU,UAAU,eACVI,KAAK,OACLC,YAAY,SACZC,aAAW,SACXC,SA7BW,SAACL,GACpBf,EAAWe,EAAMM,OAAOC,MAAMC,iBAuBxB,cAMc,yBAIjBtB,EAAKuB,KAAI,SAACvB,GACT,OACE,6BACE,yBAAKY,UAAU,QAAf,IACIZ,EAAKwB,GADT,KACexB,EAAKyB,QAAQC,KAAKC,eAEjC,yBAAKf,UAAU,YAAYgB,IAAI,aAC7B,yBAAKhB,UAAU,SAASiB,IAAK7B,EAAK8B,QAAL,iBAE/B,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAS,mBAAd,MACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,0BACb,yBAAKA,UAAS,mBAAd,UACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,0BACb,yBAAKA,UAAS,mBAAd,WACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,0BACb,yBAAKA,UAAS,mBAAd,kBACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,0BACb,yBAAKA,UAAS,mBAAd,mBACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,0BACb,yBAAKA,UAAS,mBAAd,SACA,yBAAKA,UAAS,mBACZ,yBAAKA,UAAU,YACb,yBACEA,UAAU,gBACVmB,KAAK,cACLC,MAAO,CACLC,MAAM,GAAD,OAAKjC,EAAKkC,MAAM,GAAGC,UAAnB,MAEPC,gBAAc,KACdC,gBAAc,IACdC,gBAAc,OAEd,+BAAQtC,EAAKkC,MAAM,GAAGC,eAK9B,yBAAKvB,UAAU,QAAf,SAA6BZ,EAAKuC,MAAM,GAAGvB,KAAKU,MAChD,yBAAKd,UAAU,QAAf,WAA6C,GAAdZ,EAAKwC,OAApC,MACA,yBAAK5B,UAAU,QAAf,WAA+BZ,EAAKyC,OAAS,GAA7C,cC9JMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.c3fc027b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [pokemon, setPokemon] = useState(\"\");\n  const [data, setData] = useState([]);\n\n  const handleChange = (event) => {\n    setPokemon(event.target.value.toLowerCase());\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getPokemon();\n  };\n\n  const getPokemon = async () => {\n    const dataArray = [];\n    try {\n      const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`;\n      const response = await axios.get(url);\n      dataArray.push(response.data);\n      setData(dataArray);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n            onChange={handleChange}\n            placeholder=\"enter pokemon name\"\n          />\n        </label>\n      </form>\n      {data.map((data) => {\n        return (\n          <div>\n            <div className=\"name\">\n              #{data.id}. {data.species.name.toUpperCase()}\n            </div>\n            <div className=\"imageCell\" key=\"sprite.id\">\n              <img className=\"sprite\" src={data.sprites[\"front_default\"]} />\n            </div>\n            <div className=\"statsCell\">\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>HP</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[0].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[0].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>Attack</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[1].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[1].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>Defense</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[2].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[2].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>Special Attack</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[3].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[3].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>Special Defense</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[4].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[4].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className={`col-12 col-md-9`}>Speed</div>\n                <div className={`col-12 col-md-9`}>\n                  <div className=\"progress\">\n                    <div\n                      className=\"progress-bar \"\n                      role=\"progressbar\"\n                      style={{\n                        width: `${data.stats[5].base_stat}%`,\n                      }}\n                      aria-valuenow=\"25\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                    >\n                      <small>{data.stats[5].base_stat}</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"stat\">type: {data.types[0].type.name}</div>\n              <div className=\"stat\">height: {data.height * 10}cm</div>\n              <div className=\"stat\">weight: {data.weight / 10}kg</div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}